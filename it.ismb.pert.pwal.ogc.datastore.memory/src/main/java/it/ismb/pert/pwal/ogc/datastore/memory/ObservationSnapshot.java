/*
 * In-Memory OGC Datastore
 * 
 * Copyright (c) 2014 Dario Bonino
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
package it.ismb.pert.pwal.ogc.datastore.memory;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;

import com.mycila.event.Event;

import it.ismb.pertlab.ogc.sensorthings.api.datamodel.Observation;
import it.ismb.pertlab.pwal.api.events.base.PWALNewDataAvailableEvent;
import it.ismb.pertlab.pwal.api.events.pubsub.subscriber.PWALEventSubscriber;
import it.ismb.pertlab.pwal.event.format.ogc.sensorthings.api.OGCSensorThingsAPIPayloadFactory;

/**
 * A memory snapshot of the last Observations generated by the PWAL, one per
 * device datastream. The list is kept up-to-data by listening to observation
 * events dispatched through the PWAL inner event bus.
 * 
 * @author <a href="mailto:bonino@ismb.it">Dario Bonino</a>
 *
 */
public class ObservationSnapshot extends PWALEventSubscriber<PWALNewDataAvailableEvent> implements InMemorySnapshot
{
	// the snapshot of latest observations
	private Hashtable<String, Observation> latestObservations;
	
	// the OGC Payload factory
	private OGCSensorThingsAPIPayloadFactory payloadFactory;
	
	// the platform fully qualified domain name
	private String fqdn;
	
	// the connected flag
	private boolean connected;
	
	/**
	 * Default empty constructor to support the bean instantiation pattern
	 */
	public ObservationSnapshot()
	{
		// create the Observation snapshot
		this.latestObservations = new Hashtable<String, Observation>();
		
		// the OGC payload factory
		this.payloadFactory = OGCSensorThingsAPIPayloadFactory.getInstance();
		
		// empty fqdn
		this.fqdn = "";
		
		// initially disconnected
		this.connected = false;
	}
	
	/**
	 * Builds an ObservationSnaphost for the ALMANAC Platform Instance having
	 * the given Fully Qualified Domain Name
	 * 
	 * @param platformFQDN
	 *            The platform instance Fully Qualified Domain Name as a
	 *            {@link String}.
	 */
	public ObservationSnapshot(String platformFQDN)
	{
		// create the Observation snapshot
		this.latestObservations = new Hashtable<String, Observation>();
		
		// the OGC payload factory
		this.payloadFactory = OGCSensorThingsAPIPayloadFactory.getInstance();
		
		// store the given platform FQDN
		this.fqdn = platformFQDN;
		
		// initially disconnected
		this.connected = false;
	}
	
	/**
	 * Handle observation events and updates the observation snapshot
	 */
	public void onEvent(Event<PWALNewDataAvailableEvent> event) throws Exception
	{
		// get the event as observation
		Set<Observation> eventObservations = this.payloadFactory.getObservationDataPayload(event.getSource(),
				this.fqdn);
		
		// add the observations to the snapshot
		for (Observation observation : eventObservations)
		{
			this.latestObservations.put(observation.getDatastream().getId(), observation);
		}
	}
	
	/**
	 * Provide the last observation on the given datastream (no historic data is
	 * kept)
	 * 
	 * @param datastreamId
	 *            The datastream for which the last observation shall be
	 *            retrieved
	 * @return The last observation for the given datastream, if any available
	 */
	public Observation getLastObservation(String datastreamId)
	{
		// the observation to return
		Observation os = null;
		
		// check if the datastream exists, and get it
		if (this.latestObservations.containsKey(datastreamId))
			os = this.latestObservations.get(datastreamId);
		
		return os;
	}
	
	/**
	 * Lists all observations in the current snapshot
	 * 
	 * @return the list of all Observations currently in the snapshot.
	 */
	public List<Observation> listObservations()
	{
		// prepare a list of last observations
		List<Observation> observations = new ArrayList<Observation>();
		
		// add the whole snapshot
		observations.addAll(this.latestObservations.values());
		
		// return the list
		return observations;
	}
	
	/**
	 * Provides the size of the current Observation snapshot, 0 if the snapshot
	 * is empty or not intialized
	 * 
	 * @return The snapshot size as an integer.
	 */
	public int size()
	{
		// default empty
		int size = 0;
		
		// if the snapshot is not null get the actual snapshot size
		if (this.latestObservations != null)
			size = this.latestObservations.size();
		
		// return the size
		return size;
	}
	

	/**
	 * Implements the InMemorySnapshot connected check, returns true if the snapshot is connected, false otherwise
	 */
	public boolean isConnected()
	{
		return this.connected;
	}

	/**
	 * Sets the connection status for this snapshot
	 * @param connected the connected to set
	 */
	public void setConnected(boolean connected)
	{
		this.connected = connected;
	}
	
	
	
	
	
}
